(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{195:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),n("blockquote",[n("p",[t._v("原文来源："),n("a",{attrs:{href:"http://python.jobbole.com/87613/",target:"_blank",rel:"noopener noreferrer"}},[t._v("提高你的Python: 解释 yield 和 Generators（生成器）"),n("OutboundLink")],1)])]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),n("p",[t._v('对于在计算机编程中所讨论的函数，这是很标准的流程。这样的函数只能返回一个值，不过，有时可以创建能产生一个序列的函数还是有帮助的。要做到这一点，这种函数要能够"保存自己的工作"。')]),t._v(" "),t._m(3),t._v(" "),n("p",[t._v('在Python中，拥有这种能力的"函数"被称为"生成器"。它是非常有用的。生成器(以及yield语句)最初的引入是为了让程序员可以更简单的编写用来产生值的序列的代码。以前，要实现类似随机数生成器的东西，需要实现一个类或者一个模块，在生成数据的同时保持对每次调用之间状态的跟踪。但引入生成器之后这就变得十分简单了。')]),t._v(" "),n("p",[t._v("为了更好的理解生成器所解决的问题，让我们来看一个例子。在了解这个例子的过程中，请始终记住我们需要解决的问题：生成值的序列。")]),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),n("p",[n("a",{attrs:{href:"http://docs.python.org/3/glossary.html#term-iterable",target:"_blank",rel:"noopener noreferrer"}},[t._v("迭代器"),n("OutboundLink")],1),t._v("只是对象每次返回特定成员的一种能力。")])]),t._v(" "),n("p",[t._v("你认为这含简单，稍加思索就能写出下面的代码：")]),t._v(" "),t._m(7),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),n("p",[t._v("在放弃之前，先确定一下最核心的障碍。通过思考，可以得出这样的结论：函数只有一次返回结果的机会，因而必须一次返回所有的结果。得出这样的结论似乎毫无意义；“函数不就是这样工作的么”，通常我们都这么认为的。可是，不学不成，不问不知，“如果它们并非如此呢？”")]),t._v(" "),t._m(12),t._v(" "),n("p",[t._v("不幸的是，这样做看上去似乎不太可能。即使是我们有神奇的函数，可以让我们从n遍历到无限大，我们也会在返回第一个值之后卡住：")]),t._v(" "),t._m(13),n("p",[t._v("假设这样去调用get_primes：")]),t._v(" "),t._m(14),n("p",[t._v("显然，在get_primes中，一上来就会碰到输入等于3的，并且在函数的第4行返回。与直接返回不同，我们需要的是在退出时可以为下一次请求准备一个值。")]),t._v(" "),n("p",[t._v("不过函数做不到这一点。当函数返回时，意味着全部完成。我们保证函数可以再次被调用，但是我们没法保证说，“呃，这次从上次退出时的第4行开始执行，而不是常规的从第一行开始”。函数只有一个单一的入口：函数的第1行代码。")]),t._v(" "),t._m(15),t._v(" "),n("p",[t._v("这类问题极其常见以至于Python专门加入了一个结构来解决它：生成器。一个生成器会“生成”值。创建一个生成器几乎和生成器函数的原理一样简单。")]),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),n("p",[t._v("下面是一个简单的生成器函数：")]),t._v(" "),t._m(22),n("p",[t._v("这里有两个简单的方法来使用它：")]),t._v(" "),t._m(23),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._m(28),t._v(" "),t._m(29),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._m(34),t._v(" "),t._m(35),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),t._m(38),t._v(" "),t._m(39),t._m(40),t._v(" "),t._m(41),t._v(" "),n("p",[t._v("在"),n("a",{attrs:{href:"http://www.python.org/dev/peps/pep-0342/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PEP 342"),n("OutboundLink")],1),t._v("中加入了将值传给生成器的支持。而且能让生成器在单一语句中实现，生成一个值（像从前一样），接受一个值，或同时生成一个值并接受一个值。")]),t._v(" "),t._m(42),t._v(" "),t._m(43),t._m(44),t._v(" "),t._m(45),t._m(46),t._v(" "),t._m(47),t._m(48),t._v(" "),t._m(49),t._v(" "),t._m(50),t._v(" "),t._m(51),t._v(" "),t._m(52),t._v(" "),t._m(53),n("p",[t._v("最后，希望您可以从本文的讨论中获得一些关键的思想：")]),t._v(" "),t._m(54)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"yield和generator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#yield和generator","aria-hidden":"true"}},[this._v("#")]),this._v(" yield和generator")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"协程与子例程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协程与子例程","aria-hidden":"true"}},[this._v("#")]),this._v(" 协程与子例程")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们调用一个普通的Python函数时，一般是从函数的第一行代码开始执行，结束于"),s("code",[this._v("return")]),this._v("语句、异常或者函数结束(其实是一个默认的"),s("code",[this._v("return None")]),this._v(")。一旦函数将控制权交还给调用者，就意味着函数的全部结束。函数中做的所有工作以及保存在局部变量中的数据将全部丢失。再次调用这个函数时，一切都将重新创建。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v('能够"产生一个序列"是因为我们的函数并没有像通常意义上那样返回。'),s("code",[this._v("return")]),this._v("隐含的意思是函数正将执行代码的控制权返回给函数被调用的地方。而"),s("code",[this._v("yield")]),this._v('的隐含意思是此控制权的转移是"临时的"和"自愿的"，此函数将来还会回收控制权。')])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"warning custom-block"},[s("p",{staticClass:"custom-block-title"},[this._v("注意")]),this._v(" "),s("p",[this._v("在Python之外，最简单的生成器应该是被称为协程（coroutines）的东西。在本文中，我将使用这个术语。请记住，在Python的概念中，这里提到的协程就是生成器。Python正式的术语是生成器；协程只是便于讨论，在语言层面并没有正式定义。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"例子：有趣的素数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#例子：有趣的素数","aria-hidden":"true"}},[this._v("#")]),this._v(" 例子：有趣的素数")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("假设你的老板让你写一个函数，输入参数是一个"),s("code",[this._v("int")]),this._v("的"),s("code",[this._v("list")]),this._v("，返回一个可以迭代的包含素数的结果。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("get_primes")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input_list"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    result_list "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("list")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" element "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" input_list"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" is_prime"),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            result_list"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result_list\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("# 或者这样写")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("get_primes")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input_list"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" element "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" input_list "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" is_prime"),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("# 下面是is_prime的一中实现")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("is_prime")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" number "),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" number "),n("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("True")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" number "),n("span",{attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("False")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" current "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("range")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("3")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("int")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("math"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sqrt"),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" current "),n("span",{attrs:{class:"token operator"}},[t._v("%")]),t._v(" number "),n("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("False")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("True")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("False")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上面"),s("code",[this._v("is_prime")]),this._v('的实现完全满足了需要，所以可以告诉老板任务完成了。然后老板反馈说"函数工作正常，good job"。')])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("处理无限序列")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("真的如此吗？过了几天，老板过来再次反馈说她遇到了一些问题：她打算把"),n("code",[t._v("get_primes")]),t._v("函数用于一个很大的包含数字的"),n("code",[t._v("list")]),t._v("。实际上，这个"),n("code",[t._v("list")]),t._v("非常大，仅仅是创建这个"),n("code",[t._v("list")]),t._v("就会用完系统的所有内存。为此，她希望能够在调用"),n("code",[t._v("get_primes")]),t._v("函数时带上一个"),n("code",[t._v("start")]),t._v("参数，返回所有大于这个参数的素数。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("显然，只是简单的修改"),s("code",[this._v("get_primes")]),this._v("函数是不可能的。因为我们不可能返回包含从"),s("code",[this._v("start")]),this._v("到无穷的所有素数的列表。看上去用普通函数处理这个问题的可能性比较渺茫。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("想象一下，如果"),s("code",[this._v("get_primes")]),this._v("可以只是简单返回下一个值，而不是一次返回全部的值，我们能做什么？我们就不再需要创建列表。没有列表，就没有内存的问题。由于老板告诉我们的是，她只需要遍历结果，她不会知道我们实现上的区别。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("get_primes")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" element "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" magical_infinite_range"),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" is_prime"),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" element\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("solve_number_10")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("# She *is* working on Project Euler #10, I knew it!")]),t._v("\n    total "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" next_prime "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" get_primes"),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("3")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" next_prime "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2000000")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            total "),n("span",{attrs:{class:"token operator"}},[t._v("+=")]),t._v(" next_prime\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{attrs:{class:"token keyword"}},[t._v("print")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("total"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"走进生成器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#走进生成器","aria-hidden":"true"}},[this._v("#")]),this._v(" 走进生成器")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("一个生成器函数的定义很像一个普通的函数，除了当它要生成一个值的时候，使用"),n("code",[t._v("yield")]),t._v("关键字而不是"),n("code",[t._v("return")]),t._v("。如果一个"),n("code",[t._v("def")]),t._v("的主体包含"),n("code",[t._v("yield")]),t._v("，这个函数会自动变成一个生成器（即使它包含一个"),n("code",[t._v("return")]),t._v("）。除了以上内容，创建一个生成器没有什么多余步骤了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("生成器函数返回生成器的迭代器。这可能是你最后一次见到“生成器的迭代器”这个术语了， 因为它们通常就被称作“生成器”。要注意的是生成器就是一类特殊的迭代器。作为一个迭代器，生成器必须要定义一些方法(method)，其中一个就是"),s("code",[this._v("__next__()")]),this._v("。如同迭代器一样，我们可以使用"),s("code",[this._v("next()")]),this._v("函数来获取下一个值。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("为了从生成器获取下一个值，我们使用"),s("code",[this._v("next()")]),this._v("函数，就像对付迭代器一样。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("("),s("code",[this._v("next()")]),this._v("会操心如何调用生成器的"),s("code",[this._v("__next__()")]),this._v("方法)。既然生成器是一个迭代器，它可以被用在for循环中。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("每当生成器被调用的时候，它会返回一个值给调用者。在生成器内部使用"),n("code",[t._v("yield")]),t._v("来完成这个动作(例如"),n("code",[t._v("yield 7")]),t._v(")。为了记住"),n("code",[t._v("yield")]),t._v("到底干了什么，最简单的方法是把它当作专门给生成器函数用的特殊的"),n("code",[t._v("return")]),t._v("(加上点小魔法)。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[s("code",[this._v("yield")]),this._v("就是专门给生成器用的"),s("code",[this._v("return")]),this._v("(加上点小魔法)。")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{attrs:{class:"token operator"}},[t._v(">>")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("simple_generator_function")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),n("span",{attrs:{class:"token operator"}},[t._v(">>")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("     "),n("span",{attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),n("span",{attrs:{class:"token operator"}},[t._v(">>")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("     "),n("span",{attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),n("span",{attrs:{class:"token operator"}},[t._v(">>")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("    "),n("span",{attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("3")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{attrs:{class:"token operator"}},[t._v(">>")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" value "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" simple_generator_function"),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),n("span",{attrs:{class:"token operator"}},[t._v(">>")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("     "),n("span",{attrs:{class:"token keyword"}},[t._v("print")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),n("span",{attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),n("span",{attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),n("span",{attrs:{class:"token operator"}},[t._v(">>")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" our_generator "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" simple_generator_function"),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token operator"}},[t._v(">>")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("next")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("our_generator"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),n("span",{attrs:{class:"token operator"}},[t._v(">>")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("next")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("our_generator"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),n("span",{attrs:{class:"token operator"}},[t._v(">>")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("next")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("our_generator"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token number"}},[t._v("3")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"魔法？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#魔法？","aria-hidden":"true"}},[this._v("#")]),this._v(" 魔法？")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("那么神奇的部分在哪里?当一个生成器函数调用"),n("code",[t._v("yield")]),t._v("，生成器函数的“状态”会被冻结，所有的变量的值会被保留下来，下一行要执行的代码的位置也会被记录，直到再次调用"),n("code",[t._v("next()")]),t._v("。一旦"),n("code",[t._v("next()")]),t._v("再次被调用，生成器函数会从它上次离开的地方开始。如果永远不调用"),n("code",[t._v("next()")]),t._v("，"),n("code",[t._v("yield")]),t._v("保存的状态就被无视了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们来重写"),s("code",[this._v("get_primes()")]),this._v("函数，这次我们把它写作一个生成器。注意我们不再需要"),s("code",[this._v("magical_infinite_range")]),this._v("函数了。使用一个简单的"),s("code",[this._v("while")]),this._v("循环，我们创造了自己的无穷串列。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("get_primes")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("True")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" is_prime"),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" number\n        number "),n("span",{attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("如果生成器函数调用了"),n("code",[t._v("return")]),t._v("，或者执行到函数的末尾，会出现一个"),n("code",[t._v("StopIteration")]),t._v("异常。 这会通知"),n("code",[t._v("next()")]),t._v("的调用者这个生成器没有下一个值了(这就是普通迭代器的行为)。这也是这个"),n("code",[t._v("while")]),t._v("循环在我们的"),n("code",[t._v("get_primes()")]),t._v("函数出现的原因。如果没有这个"),n("code",[t._v("while")]),t._v("，当我们第二次调用"),n("code",[t._v("next()")]),t._v("的时候，生成器函数会执行到函数末尾，触发"),n("code",[t._v("StopIteration")]),t._v("异常。一旦生成器的值用完了，再调用"),n("code",[t._v("next()")]),t._v("就会出现错误，所以你只能将每个生成器的使用一次。下面的代码是错误的：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{attrs:{class:"token operator"}},[t._v(">>")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" our_generator "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" simple_generator_function"),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token operator"}},[t._v(">>")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" value "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" our_generator"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),n("span",{attrs:{class:"token operator"}},[t._v(">>")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("     "),n("span",{attrs:{class:"token keyword"}},[t._v("print")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{attrs:{class:"token operator"}},[t._v(">>")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("# 我们的生成器没有下一个值了...")]),t._v("\n"),n("span",{attrs:{class:"token operator"}},[t._v(">>")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("print")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token builtin"}},[t._v("next")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("our_generator"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nTraceback "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("most recent call last"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  File "),n("span",{attrs:{class:"token string"}},[t._v('"<ipython-input-13-7e48a609051a>"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" line "),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("module"),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),n("span",{attrs:{class:"token builtin"}},[t._v("next")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("our_generator"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nStopIteration\n\n"),n("span",{attrs:{class:"token operator"}},[t._v(">>")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("# 然而，我们总可以再创建一个生成器")]),t._v("\n"),n("span",{attrs:{class:"token operator"}},[t._v(">>")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("# 只需再次调用生成器函数即可")]),t._v("\n\n"),n("span",{attrs:{class:"token operator"}},[t._v(">>")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" new_generator "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" simple_generator_function"),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token operator"}},[t._v(">>")]),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("print")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token builtin"}},[t._v("next")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("new_generator"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("# 工作正常")]),t._v("\n"),n("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("因此，这个"),s("code",[this._v("while")]),this._v("循环是用来确保生成器函数永远也不会执行到函数末尾的。只要调用"),s("code",[this._v("next()")]),this._v("这个生成器就会生成一个值。这是一个处理无穷序列的常见方法（这类生成器也是很常见的）。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"执行流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行流程","aria-hidden":"true"}},[this._v("#")]),this._v(" 执行流程")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("让我们回到调用"),s("code",[this._v("get_primes")]),this._v("的地方："),s("code",[this._v("solve_number_10")]),this._v("。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("solve_number_10")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    total "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" next_prime "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" get_primes"),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("3")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" next_prime "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2000000")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            total "),n("span",{attrs:{class:"token operator"}},[t._v("+=")]),t._v(" next_prime\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{attrs:{class:"token keyword"}},[t._v("print")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("total"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("我们来看一下"),n("code",[t._v("solve_number_10")]),t._v("的"),n("code",[t._v("for")]),t._v("循环中对"),n("code",[t._v("get_primes")]),t._v("的调用，观察一下前几个元素是如何创建的有助于我们的理解。当"),n("code",[t._v("for")]),t._v("循环从"),n("code",[t._v("get_primes")]),t._v("请求第一个值时，我们进入"),n("code",[t._v("get_primes")]),t._v("，这时与进入普通函数没有区别。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ol",[n("li",[t._v("进入"),n("code",[t._v("while")]),t._v("循环")]),t._v(" "),n("li",[t._v("停在"),n("code",[t._v("if")]),t._v("条件判断（"),n("code",[t._v("3")]),t._v("是素数）")]),t._v(" "),n("li",[t._v("通过"),n("code",[t._v("yield")]),t._v("将"),n("code",[t._v("3")]),t._v("和执行控制权返回给"),n("code",[t._v("solve_number_10")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接下来，回到"),s("code",[this._v("solve_number_10")]),this._v("：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ol",[n("li",[n("code",[t._v("for")]),t._v("循环得到返回值"),n("code",[t._v("3")])]),t._v(" "),n("li",[n("code",[t._v("for")]),t._v("循环将其赋给"),n("code",[t._v("next_prime")])]),t._v(" "),n("li",[n("code",[t._v("total")]),t._v("加上"),n("code",[t._v("next_prime")])]),t._v(" "),n("li",[n("code",[t._v("for")]),t._v("循环从"),n("code",[t._v("get_primes")]),t._v("请求下一个值")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这次，进入"),s("code",[this._v("get_primes")]),this._v("时并没有从开头执行，而是从上次离开的地方。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("get_primes")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("True")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" is_prime"),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" number\n        number "),n("span",{attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" \n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("最关键的是，"),n("code",[t._v("number")]),t._v("还保持我们上次调用"),n("code",[t._v("yield")]),t._v("时的值（例如"),n("code",[t._v("3")]),t._v("）。记住，"),n("code",[t._v("yield")]),t._v("会将值传给"),n("code",[t._v("next()")]),t._v("的调用方，同时还会保存生成器函数的“状态”。接下来，"),n("code",[t._v("number")]),t._v("加到"),n("code",[t._v("4")]),t._v("，回到"),n("code",[t._v("while")]),t._v("循环的开始处，然后继续增加直到得到下一个素数（"),n("code",[t._v("5")]),t._v("）。我们再一次把"),n("code",[t._v("number")]),t._v("的值通过"),n("code",[t._v("yield")]),t._v("返回给"),n("code",[t._v("solve_number_10")]),t._v("的"),n("code",[t._v("for")]),t._v("循环。这个周期会一直执行，直到"),n("code",[t._v("for")]),t._v("循环结束（得到的素数大于2000000）。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"更给力点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更给力点","aria-hidden":"true"}},[this._v("#")]),this._v(" 更给力点")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们用前面那个关于素数的函数来展示如何将一个值传给生成器。这一次，我们不再简单地生成比某个数大的素数，而是找出比某个数的等比级数大的最小素数（例如10， 我们要生成比10，100，1000，10000 … 大的最小素数）。我们从"),s("code",[this._v("get_primes")]),this._v("开始：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("print_successive_primes")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iterations"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" base"),n("span",{attrs:{class:"token operator"}},[t._v("=")]),n("span",{attrs:{class:"token number"}},[t._v("10")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("# 像普通函数一样，生成器函数可以接受一个参数")]),t._v("\n   \n    prime_generator "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" get_primes"),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("base"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("# 这里以后要加上点什么")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" power "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("range")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iterations"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{attrs:{class:"token comment"}},[t._v("# 这里以后要加上点什么")]),t._v("\n \n"),n("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("get_primes")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("True")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" is_prime"),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{attrs:{class:"token comment"}},[t._v("# 这里怎么写?")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("get_primes")]),t._v("的后几行需要着重解释。"),n("code",[t._v("yield")]),t._v("关键字返回"),n("code",[t._v("number")]),t._v("的值，而像"),n("code",[t._v("other = yield foo")]),t._v('这样的语句的意思是，"返回'),n("code",[t._v("foo")]),t._v("的值，这个值返回给调用者的同时，将"),n("code",[t._v("other")]),t._v('的值也设置为那个值"。你可以通过'),n("code",[t._v("send")]),t._v('方法来将一个值"发送"给生成器。')])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("get_primes")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("True")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" is_prime"),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            number "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" number\n        number "),n("span",{attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("通过这种方式，我们可以在每次执行"),s("code",[this._v("yield")]),this._v("的时候为"),s("code",[this._v("number")]),this._v("设置不同的值。现在我们可以补齐"),s("code",[this._v("print_successive_primes")]),this._v("中缺少的那部分代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("print_successive_primes")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iterations"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" base"),n("span",{attrs:{class:"token operator"}},[t._v("=")]),n("span",{attrs:{class:"token number"}},[t._v("10")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    prime_generator "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" get_primes"),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("base"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    prime_generator"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("send"),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token boolean"}},[t._v("None")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" power "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("range")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iterations"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("print")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prime_generator"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("send"),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("base "),n("span",{attrs:{class:"token operator"}},[t._v("**")]),t._v(" power"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这里有两点需要注意：首先，我们打印的是"),s("code",[this._v("generator.send")]),this._v("的结果，这是没问题的，因为send在发送数据给生成器的同时还返回生成器通过"),s("code",[this._v("yield")]),this._v("生成的值（就如同生成器中"),s("code",[this._v("yield")]),this._v("语句做的那样）。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("第二点，看一下"),n("code",[t._v("prime_generator.send(None)")]),t._v("这一行，当你用"),n("code",[t._v("send")]),t._v('来"启动"一个生成器时（就是从生成器函数的第一行代码执行到第一个'),n("code",[t._v("yield")]),t._v("语句的位置），你必须发送"),n("code",[t._v("None")]),t._v("。这不难理解，根据刚才的描述，生成器还没有走到第一个"),n("code",[t._v("yield")]),t._v('语句，如果我们发生一个真实的值，这时是没有人去"接收"它的。一旦生成器启动了，我们就可以像上面那样发送数据了。')])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"综述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#综述","aria-hidden":"true"}},[this._v("#")]),this._v(" 综述")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("在本文章的后半部分，我们将讨论了一些"),n("code",[t._v("yield")]),t._v("的高级用法及其效果。"),n("code",[t._v("yield")]),t._v("已经成为Python最强大的关键字之一。现在我们已经对"),n("code",[t._v("yield")]),t._v("是如何工作的有了充分的理解，我们已经有了必要的知识，可以去了解"),n("code",[t._v("yield")]),t._v('的一些更"费解"的应用场景。')])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("不管你信不信，我们其实只是揭开了"),n("code",[t._v("yield")]),t._v("强大能力的一角。例如，"),n("code",[t._v("send")]),t._v("确实如前面说的那样工作，但是在像我们的例子这样，只是生成简单的序列的场景下，"),n("code",[t._v("send")]),t._v("几乎从来不会被用到。下面贴一段代码，展示"),n("code",[t._v("send")]),t._v("通常的使用方式。对于这段代码如何工作以及为何可以这样工作，在此并不多说，它将作为第二部分很不错的热身。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" random\n \n"),n("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("get_data")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{attrs:{class:"token triple-quoted-string string"}},[t._v('"""返回0到9之间的3个随机数"""')]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" random"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sample"),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token builtin"}},[t._v("range")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("10")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("3")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \n"),n("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("consume")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{attrs:{class:"token triple-quoted-string string"}},[t._v('"""显示每次传入的整数列表的动态平均值"""')]),t._v("\n    running_sum "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n    data_items_seen "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n \n    "),n("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("True")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        data "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("yield")]),t._v("\n        data_items_seen "),n("span",{attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("len")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        running_sum "),n("span",{attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("sum")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("print")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'The running average is {}'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token builtin"}},[t._v("format")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("running_sum "),n("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("float")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data_items_seen"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \n"),n("span",{attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("produce")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("consumer"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{attrs:{class:"token triple-quoted-string string"}},[t._v('"""产生序列集合，传递给消费函数（consumer）"""')]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("True")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        data "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" get_data"),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("print")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'Produced {}'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token builtin"}},[t._v("format")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        consumer"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("send"),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("yield")]),t._v("\n \n"),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),n("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'__main__'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    consumer "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" consume"),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    consumer"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("send"),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token boolean"}},[t._v("None")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    producer "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" produce"),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("consumer"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n \n    "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" _ "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("range")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token number"}},[t._v("10")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{attrs:{class:"token keyword"}},[t._v("print")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'Producing...'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{attrs:{class:"token builtin"}},[t._v("next")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("producer"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ul",[n("li",[t._v("generator是用来产生一系列值的")]),t._v(" "),n("li",[n("code",[t._v("yield")]),t._v("则像是generator函数的返回结果")]),t._v(" "),n("li",[n("code",[t._v("yield")]),t._v("唯一所做的另一件事就是保存一个generator函数的状态")]),t._v(" "),n("li",[t._v("generator就是一个特殊类型的迭代器（iterator）")]),t._v(" "),n("li",[t._v("和迭代器相似，我们可以通过使用"),n("code",[t._v("next()")]),t._v("来从generator中获取下一个值")]),t._v(" "),n("li",[t._v("通过隐式地调用"),n("code",[t._v("next()")]),t._v("来忽略一些值")])])}],!1,null,null,null);e.options.__file="yield-generator.md";s.default=e.exports}}]);